name: Refresh Bling API Token

on:
  schedule:
    - cron: '* * * * *'
    
jobs:
  refresh-token:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          
      - name: Install Dependencies
        run: npm install
        
      - name: Create Token Refresh Script
        run: |
          cat > refresh.js << 'EOF'
          const { initializeApp } = require('firebase/app');
          const { getDatabase, ref, get, update } = require('firebase/database');
          
          const firebaseConfig = {
            apiKey: process.env.FIREBASE_API_KEY,
            authDomain: process.env.FIREBASE_AUTH_DOMAIN,
            databaseURL: process.env.FIREBASE_DATABASE_URL,
            projectId: process.env.FIREBASE_PROJECT_ID,
            storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
            messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
            appId: process.env.FIREBASE_APP_ID
          };
          
          async function refreshTokens() {
            const app = initializeApp(firebaseConfig);
            const db = getDatabase(app);
            
            try {
              const blingRef = ref(db, 'bling');
              const snapshot = await get(blingRef);
              
              if (snapshot.exists()) {
                const companies = snapshot.val();
                
                for (const key in companies) {
                  const company = companies[key];
                  try {
                    console.log(`Atualizando token para empresa ${company.id}...`);

                    console.log(`ClientID:${company.client_id}, ClientSecret:${company.client_secret}`)
                    
                    const response = await fetch('https://www.bling.com.br/Api/v3/oauth/token', {
                      method: 'POST',
                      headers: {
                        'Accept': 'application/json',
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'Authorization': `Basic ${Buffer.from(`${company.client_id}:${company.client_secret}`).toString('base64')}`
                      },
                      body: new URLSearchParams({
                        'grant_type': 'refresh_token',
                        'refresh_token': company.refresh_token
                      }).toString()
                    });
                    
                    const responseText = await response.text();
                    console.log(`Response for ${company.id}:`, responseText);
                    
                    if (!response.ok) {
                      throw new Error(`HTTP error! status: ${response.status}, body: ${responseText}`);
                    }
                    
                    const data = JSON.parse(responseText);
                    
                    if (!data.access_token || !data.refresh_token) {
                      throw new Error('Invalid response: missing token data');
                    }
                    
                    await update(ref(db, `bling/${key}`), {
                      access_token: data.access_token,
                      refresh_token: data.refresh_token
                    });
                    
                    console.log(`Token atualizado com sucesso para empresa ${company.id}`);
                  } catch (error) {
                    console.error(`Erro ao atualizar token para empresa ${company.id}:`, error);
                  }
                }
              }
            } finally {
              // Encerra a conexÃ£o com o Firebase
              await new Promise(resolve => setTimeout(resolve, 1000));
              process.exit(0);
            }
          }
          
          refreshTokens().catch(error => {
            console.error('Erro fatal:', error);
            process.exit(1);
          });
          EOF

      - name: Run Token Refresh
        run: node refresh.js
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
